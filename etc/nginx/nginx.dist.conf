#   +---------------------------------------------------------------------------------+
#   | This file is part of greathouse-openresty                                       |
#   +---------------------------------------------------------------------------------+
#   | Copyright (c) 2017 Greathouse Technology LLC (http://www.greathouse.technology) |
#   +---------------------------------------------------------------------------------+
#   | greathouse-openresty is free software: you can redistribute it and/or modify    |
#   | it under the terms of the GNU General Public License as published by            |
#   | the Free Software Foundation, either version 3 of the License, or               |
#   | (at your option) any later version.                                             |
#   |                                                                                 |
#   | greathouse-openresty is distributed in the hope that it will be useful,         |
#   | but WITHOUT ANY WARRANTY; without even the implied warranty of                  |
#   | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                   |
#   | GNU General Public License for more details.                                    |
#   |                                                                                 |
#   | You should have received a copy of the GNU General Public License               |
#   | along with greathouse-openresty.  If not, see <http://www.gnu.org/licenses/>.   |
#   +---------------------------------------------------------------------------------+
#   | Author: Jesse Greathouse <jesse@greathouse.technology>                          |
#   +---------------------------------------------------------------------------------+

# Declare the environment variables
env ENV;
env DEBUG;
env FORCE_SSL;
env DIR;
env BIN;
env ETC;
env OPT;
env SRC;
env TMP;
env VAR;
env WEB;
env REDIS_HOST;
env CACHE_DIR;
env LOG_DIR;
env DB_NAME;
env DB_USER;
env DB_PASSWORD;
env DB_HOST;
env DB_PORT;

worker_processes  auto;

error_log __LOG__ warn;

events {
    worker_connections 1024;
}

http {
  include       mime_types.conf;
  default_type  text/html;

  sendfile           on;
  tcp_nopush         on;
  tcp_nodelay        on;
  keepalive_timeout  75;
  client_max_body_size 100m;

  # enable gzip compression
  gzip  on;
  gzip_vary on;
  gzip_min_length 1000;
  gzip_types text/plain text/css text/xml text/javascript application/javascript application/x-javascript application/xml text/x-component text/x-js text/richtext image/svg+xml text/xsd text/xsl image/bmp application/java application/msword application/vnd.ms-fontobject application/x-msdownload image/x-icon image/webp application/json application/vnd.ms-access application/vnd.ms-project application/x-font-otf application/vnd.ms-opentype application/vnd.oasis.opendocument.database application/vnd.oasis.opendocument.chart application/vnd.oasis.opendocument.formula application/vnd.oasis.opendocument.graphics application/vnd.oasis.opendocument.spreadsheet application/vnd.oasis.opendocument.text audio/ogg application/pdf application/vnd.ms-powerpoint application/x-shockwave-flash image/tiff application/x-font-ttf audio/wav application/vnd.ms-write application/font-woff application/font-woff2 application/vnd.ms-excel;
  # end gzip configuration

  #file caching
  open_file_cache          max=1000 inactive=5m;
  open_file_cache_valid    2m;
  open_file_cache_min_uses 1;
  open_file_cache_errors   off;
  # end file caching configuration

  access_log off;
  lua_capture_error_log 100k;

  include lua_package_path.conf;
  include lua_package_cpath.conf;

  # Endpoint for testing the health of the web server.
  server {
    listen __PORT__;

    location = /ping {
        return 200 'OK';
        add_header Content-Type text/plain;
    }
  }

  server {
    listen __PORT__;
    server_name __SITE_DOMAINS__ ;
    port_in_redirect off;

    # Set up ENV variables
    include lua_env.conf;

    set $ssl '';
    if ($FORCE_SSL = 'true') {
      set $ssl  'T';
    }

    if ($http_x_forwarded_proto != 'https') {
      set $ssl  "${ssl}T";
    }

    if ($ssl = 'TT') {
      rewrite ^ https://$host$request_uri? permanent;
    }

    # Set up url rewrites
    include rewrites.conf;

    root $WEB;
    set $template_root $WEB;

    resolver local=on ipv6=off;
    resolver_timeout 5s;

    set $session_secret __SESSION_SECRET__;

    # System endpoints. Modify with caution.
    location = /ping {
        return 200 'OK';
        add_header Content-Type text/plain;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires max;
        log_not_found off;
    }

    location / {
        try_files $uri $uri/ =404;
    }

    # Put all error page handling in error_page.conf
    include error_page.conf;

    # Put all custom endpoints in routes.conf
    include routes.conf;

  }
}

daemon off;