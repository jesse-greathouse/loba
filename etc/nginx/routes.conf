location = / {
    default_type 'text/html';

    # views.index
    content_by_lua_block {
        local view = require "views.home"
        view.index()
    }
}

location = /api/site {
    default_type 'application/json';

    # views.api.site
    content_by_lua_block {
        local view = require "views.api.site":new('/api/site')
        if ngx.var.request_method == "POST" then
            view:post()
        else
            view:get()
        end
    }
}

location /api/site {
     default_type 'application/json';

    # views.api.site
    content_by_lua_block {
        local view = require "views.api.site":new('/api/site/:id')
        if ngx.var.request_method == "PUT" then
            view:put()
        elseif ngx.var.request_method == "DELETE" then
            view:delete()
        else
            view:get_id()
        end
    }
}

location = /api/method {
    default_type 'application/json';

    # views.api.method
    content_by_lua_block {
        local view = require "views.api.method":new('/api/method')
        view:get()
    }
}

location /api/method {
     default_type 'application/json';

    # views.api.method
    content_by_lua_block {
        local view = require "views.api.method":new('/api/method/:id')
        view:get_id()
    }
}

location = /api/upstream {
    default_type 'application/json';

    # views.api.upstream
    content_by_lua_block {
        local view = require "views.api.upstream":new('/api/upstream')
        if ngx.var.request_method == "POST" then
            view:post()
        else
            view:get()
        end
    }
}

location /api/upstream {
     default_type 'application/json';

    # views.api.upstream
    content_by_lua_block {
        local view = require "views.api.upstream":new('/api/upstream/:id')
        if ngx.var.request_method == "PUT" then
            view:put()
        elseif ngx.var.request_method == "DELETE" then
            view:delete()
        else
            view:get_id()
        end
    }
}

location = /api/server {
    default_type 'application/json';

    # views.api.site
    content_by_lua_block {
        local view = require "views.api.server":new('/api/server')
        if ngx.var.request_method == "POST" then
            view:post()
        else
            view:get()
        end
    }
}

location /api/server {
     default_type 'application/json';

    # views.api.site
    content_by_lua_block {
        local view = require "views.api.server":new('/api/server/:id')
        if ngx.var.request_method == "PUT" then
            view:put()
        elseif ngx.var.request_method == "DELETE" then
            view:delete()
        else
            view:get_id()
        end
    }
}

location = /api/user {
    default_type 'application/json';

    # views.api.site
    content_by_lua_block {
        local view = require "views.api.user":new('/api/user')
        if ngx.var.request_method == "POST" then
            view:post()
        else
            local args = ngx.req.get_uri_args()
            if next(args) then
                view:find(args)
            else
                view:get()
            end
        end
    }
}

location /api/user {
     default_type 'application/json';

    # views.api.site
    content_by_lua_block {
        local view = require "views.api.user":new('/api/user/:id')
        if ngx.var.request_method == "PUT" then
            view:put()
        elseif ngx.var.request_method == "DELETE" then
            view:delete()
        else
            view:get_id()
        end
    }
}

location /error {
    default_type 'text/html';

    # views.error
    content_by_lua_block {
        local uri = ngx.var.request_uri
        local view = require "views.home"

        if uri:find('^/api/') ~= nil then
            ngx.header.content_type = 'application/json';
            view = require "views.api.base"
        end

        view.error()
    }
}

location /pixel {
    default_type 'image/gif';

    # empty tracking pixel
    content_by_lua_block {
        if (ngx.status == ngx.HTTP_OK) then
            local timestring = ngx.http_time(ngx.utctime())
            ngx.header["Last-Modified"] = timestring
            ngx.header["Expires"] = timestring
            ngx.header["Pragma"] = "no-cache"
            ngx.header["Cache-Control"] = "private, no-cache, no-cache=Set-Cookie, proxy-revalidate"
        end
    }

    empty_gif;
}